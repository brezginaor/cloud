- name: Create production server
  hosts: localhost
  connection: local
  vars:
    terraform_path: "{{ playbook_dir }}/tf"
    tf_vars:
      TF_VAR_user_name: "{{ lookup('env','TF_VAR_user_name') }}"
      TF_VAR_password: "{{ lookup('env','TF_VAR_password') }}"
  tasks:
    - name: Terraform init with upgrade
      command: terraform init -input=false -upgrade
      args:
        chdir: "{{ terraform_path }}"
      environment: "{{ tf_vars }}"

    - name: Terraform apply to create infrastructure
      command: >
        terraform apply -auto-approve
        -var "user_name={{ tf_vars.TF_VAR_user_name }}"
        -var "password={{ tf_vars.TF_VAR_password }}"
      args:
        chdir: "{{ terraform_path }}"
      environment: "{{ tf_vars }}"
      register: tf_apply

    - name: Get server IP address
      command: terraform output -raw servers.serverip
      args:
        chdir: "{{ terraform_path }}"
      register: tf_output

    - name: Export server IP
      lineinfile:
        dest: ~/myenv
        regexp: '^DEPLOYMENT_SERVER_IP='
        line: "DEPLOYMENT_SERVER_IP={{ tf_output.stdout }}"
        create: yes

    - name: Add production host to inventory
      add_host:
        name: brezgina-server
        groups: nodes
        ansible_host: "{{ tf_output.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: ~/.ssh/2025-key-brezgina
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Wait for instance to be ready
  hosts: localhost
  connection: local
  tasks:
    - name: Wait for SSH port
      wait_for:
        host: "{{ tf_output.stdout }}"
        port: 22
        timeout: 300

- name: Prepare production for deploy
  hosts: brezgina-server
  become: yes
  vars:
    service_file: "{{ playbook_dir }}/files/botserver.service"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Node.js and npm
      apt:
        pkg:
          - nodejs
          - npm
        state: present
        update_cache: yes

    - name: Install LocalTunnel globally
      npm:
        name: localtunnel
        global: yes

    - name: Create LocalTunnel systemd unit
      copy:
        dest: /etc/systemd/system/localtunnel.service
        content: |
          [Unit]
          Description=LocalTunnel for Telegram Bot
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          ExecStart=/usr/bin/lt --port 8081 --subdomain mybot
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start LocalTunnel
      systemd:
        name: localtunnel
        enabled: yes
        state: restarted

    - name: Add OpenJDK GPG key
      apt_key:
        url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xF7C313DB11F1ED148BB5117C08B3810CB7017B89"
        state: present

    - name: Add OpenJDK 21 repository manually
      apt_repository:
        repo: "deb [arch=amd64] https://ppa.launchpadcontent.net/openjdk-r/ppa/ubuntu {{ ansible_distribution_release }} main"
        filename: openjdk-21
        state: present

    - name: Install OpenJDK 21
      apt:
        pkg: openjdk-21-jdk-headless
        state: present
        update_cache: yes

    - name: Copy bot JAR to server
      copy:
        src: "{{ playbook_dir }}/bot.jar"
        dest: /home/ubuntu/bot.jar
        mode: '0755'

    - name: Copy application.properties
      copy:
        src: "{{ playbook_dir }}/application.properties"
        dest: /home/ubuntu/application.properties
        mode: '0644'

    - name: Deploy bot systemd service
      copy:
        src: "{{ service_file }}"
        dest: /etc/systemd/system/botserver.service
        mode: '0644'

    - name: Reload systemd and restart bot
      systemd:
        daemon_reload: yes
        name: botserver
        state: restarted

  rescue:
    - name: Clean up resources on failure
      command: terraform destroy -auto-approve
      args:
        chdir: "{{ playbook_dir }}/tf"
